import swaggerJsdoc from 'swagger-jsdoc';
import { OpenApiGeneratorV3 } from '@asteasolutions/zod-to-openapi';
import { registry } from './openapi-registry';
import '@/lib/validation'; // Import for side effects to register schemas

const definition = {
  openapi: '3.0.0',
  info: {
    title: 'Hepi Bite API',
    version: '1.0.0',
    description: 'API documentation for the Hepi Bite application.',
  },
  servers: [
    {
      url: '/api',
      description: 'API base path',
    },
  ],
  components: {
    securitySchemes: {
      cookieAuth: {
        type: 'apiKey',
        in: 'cookie',
        name: 'auth_token',
      },
    },
  },
  // Global security is not set here.
  // We will define security per-endpoint in the JSDoc annotations,
  // which matches how the middleware protects specific routes.
  security: [],
};

const options: swaggerJsdoc.Options = {
  definition,
  // We will scan files in `app/api` for JSDoc and `lib/validation` for schema definitions.
  apis: ['./src/app/api/**/*.ts', './src/app/api/**/route.ts', './src/lib/validation.ts'],
};

export function generateOpenApiSpec() {
  // Manually trigger JSDoc parsing
  const spec = swaggerJsdoc(options);

  // Generate OpenAPI components from the Zod schema registry
  const generator = new OpenApiGeneratorV3(registry.definitions);
  const openapiComponents = generator.generateComponents();

  // Merge the components generated by zod-to-openapi into the main spec
  spec.components = {
    ...spec.components,
    ...openapiComponents.components,
  };

  return spec;
}
